# MongoDB RAG Chatbot

This project is a RAG (Retrieval-Augmented Generation) chatbot that allows you to query documents stored in MongoDB Atlas using vector search powered by OpenAI embeddings.

It supports uploading and indexing PDFs on demand, and uses LangGraph to manage the RAG workflow.

---

## 📁 Project Structure

```
.
├── docs/                   # Folder for source PDFs
├── node_modules/
├── src/
│   ├── mongodb-rag-debug.ts    # Main script (can upload + query documents)
│   └── new.tutorial.ts         # Older version / experiments
├── .env                    # Environment variables (API keys etc)
├── package.json
├── tsconfig.json
└── README                  # This file
```

---

## 🧪 Setup

### 1. Clone and install

```bash
git clone <repo>
cd <repo>
npm install
```

### 2. Configure `.env`

Create a `.env` file with the following:

```env
MONGODB_ATLAS_URI=mongodb+srv://<username>:<password>@cluster.mongodb.net
```

Make sure you have:

- A vector index on the `embedding` field of your `rmd_rag.documents` collection
- Set to 1536 dimensions (`text-embedding-3-small`)
- Cosine similarity

---

## 🚀 Usage

### ➤ Query existing indexed documents:

```bash
ts-node src/mongodb-rag-debug.ts
```

### ➤ Upload new documents from `./docs` and re-index:

```bash
ts-node src/mongodb-rag-debug.ts --upload
```

### ➤ Create jsonl file with more contextual chunks:

```bash
ts-node src/chunked.ts
```

### ➤ Upload jsonl files:

```bash
ts-node src/mongo-rag-jsonl.ts
```

This will:

- Read all PDFs from `./docs`
- Chunk and embed them
- Upload them into MongoDB with vector search support

---

## 🧠 How it Works

- PDFs are split into chunks with LangChain
- OpenAI's `text-embedding-3-small` is used to embed chunks
- Embeddings are stored in MongoDB Atlas with a vector index
- LangGraph powers the RAG pipeline:
  - Retrieves relevant chunks
  - Sends them to OpenAI (`gpt-4o-mini`)
  - Generates answers based only on context

---

## 🛠️ Optional: Programmatically create the vector index

You can create your MongoDB vector index via API. See the script or ask for a helper.

---

Let me know if you'd like a frontend UI or Docker setup next.
